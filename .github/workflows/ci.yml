name: Own-CFA-Enishi CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: 1.70

jobs:
  validate:
    name: Validation & Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Build workspace
        run: cargo build --workspace --verbose

      - name: Run unit tests
        run: cargo test --workspace --verbose

      - name: Run Own-CFA-Enishi validation
        run: |
          rustc simple_validate.rs --edition 2021 && ./simple_validate
          VALIDATION_EXIT_CODE=$?
          if [ $VALIDATION_EXIT_CODE -ne 0 ]; then
            echo "❌ Validation failed"
            exit $VALIDATION_EXIT_CODE
          fi
          echo "✅ Validation passed"

      - name: Generate test coverage
        uses: actions-rs/grcov@v0.1
        continue-on-error: true

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run benchmarks
        run: cargo bench --workspace || true  # Benchmarks may not exist yet

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: target/criterion/**/*
        continue-on-error: true

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit || true  # Continue on warnings

      - name: Upload audit results
        uses: actions/upload-artifact@v3
        with:
          name: security-audit
          path: ./*.json
        continue-on-error: true

  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: enishi:test-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm enishi:test-${{ github.sha }} --version || true

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Generate documentation
        run: cargo doc --workspace --no-deps

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: rust-docs
          path: target/doc/
        if-no-files-found: warn

  release:
    name: Release Build
    runs-on: ubuntu-latest
    needs: [validate, benchmark, security-audit]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Build release binary
        run: cargo build --release --workspace

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: enishi-release-${{ github.sha }}
          path: |
            target/release/enishi-*
            !target/release/deps/
        if-no-files-found: warn

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [validate, benchmark, security-audit, docker-build, docs]
    if: always()
    steps:
      - name: CI Status Summary
        run: |
          echo "CI Pipeline Status Summary:"
          echo "Validation: ${{ needs.validate.result }}"
          echo "Benchmark: ${{ needs.benchmark.result }}"
          echo "Security: ${{ needs.security-audit.result }}"
          echo "Docker: ${{ needs.docker-build.result }}"
          echo "Docs: ${{ needs.docs.result }}"

          if [[ "${{ needs.validate.result }}" == "success" && \
                "${{ needs.security-audit.result }}" == "success" ]]; then
            echo "✅ CI Pipeline: PASSED"
          else
            echo "❌ CI Pipeline: FAILED"
            exit 1
          fi
